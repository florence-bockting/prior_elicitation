.. _expert_data_howto:

How-To specify the ``expert_data``?
###################################

Approach 1: Oracle (specify a ground truth)
*******************************************

Specify a prior distribution as ground truth. Given this true prior, samples
are drawn from the generative model and the corresponding elicited statistics
computed.

This procedure is done only once before the training starts. The resulting
elicited statistics are used as expert data in the loss.

It is recommended to use a high number of samples (e.g., ``10_000``) to reduce
sampling variation.

Example inputs for ``expert_data``
==================================

.. code-block:: python

    # example for parametric_prior with 2 independent prior distributions
    # for parameters mu and sigma
    expert_data=dict(
        from_ground_truth=True,
        simulator_specs={
            "mu": tfd.Normal(loc=10, scale=2),
            "sigma": tfd.Gamma(2, 5),
        },
        samples_from_prior=10_000,
    )


    # example for deep_prior with joint prior distribution for parameters mu 
    # and sigma

    # define covariance matrix for joint prior
    S = [2.5, 1.3]
    M = [[1., 0.3,],
         [0.3, 1.]]
    covariance_matrix = (tf.linalg.diag(S) @ M) @ tf.linalg.diag(S)

    # specify input data
    expert_data=dict(
        from_ground_truth=True,
        simulator_specs={
            "theta": tfd.MultivariateNormalTriL(
                loc=[10, 2],
                scale_tril=tf.linalg.cholesky(covariance_matrix)
                )
            },
        samples_from_prior=10_000,
    )

Access generated data
=====================

The expert data is stored as pickle object in the path ``output_path/expert/``.
The ``output_path`` is defined in the argument ``trainings_settings`` of the
function ``prior_elicitation``. By default the folder is called ``"results"``
and saved in the active working directory.

.. code-block:: python

    import pandas as pd
    # get prior samples generated by the oracle
    pd.read_pickle("output_path/expert/prior_samples.pkl")
    # get elicited statistics generated by the oracle
    pd.read_pickle("output_path/expert/elicited_statistics.pkl")


Approach 2: Input data elicited from expert
*******************************************

In order to input the elicited data from an expert, use the argument ``data``.
It is important that the expert data has exactly the same format as the
simulated statistics, which is as follows:

.. code-block:: python

    # pseudo code
    expert_elicited_statistcs = dict(
        {elicitation_technique1}_{target_quantity1}=expert_data1,
        {elicitation_technique2}_{target_quantity2}=expert_data2,
        ...
    )

    # example code
    expert_elicited_statistcs = dict(
        quantiles_group1=expert_data1,
        quantiles_group2=expert_data2,
        histogram_R2=expert_data3
    )

Whereby the ``shape`` of the ``expert_data`` have to match the shape of the
simulated statistics, which have the form ``(1, size_of_data)``

*Examples:*

+ quantile-based elicitation: ``(1, number_of_quantiles)``
+ histogram-based elicitation: ``(1, number_of_samples)``


Example inputs for ``expert_data``
==================================

.. code-block:: python

    # example for parametric_prior with 2 independent prior distributions
    # for parameters mu and sigma
    expert_data=dict(
        from_ground_truth=False,
        data="path_to_expert_data/elicited_statistics.pkl"
    )